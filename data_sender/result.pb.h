// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: result.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_result_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_result_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_result_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_result_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_result_2eproto;
class EVM;
struct EVMDefaultTypeInternal;
extern EVMDefaultTypeInternal _EVM_default_instance_;
class constellation;
struct constellationDefaultTypeInternal;
extern constellationDefaultTypeInternal _constellation_default_instance_;
class result;
struct resultDefaultTypeInternal;
extern resultDefaultTypeInternal _result_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class constellation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:constellation) */ {
 public:
  inline constellation() : constellation(nullptr) {}
  ~constellation() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR constellation(
      ::google::protobuf::internal::ConstantInitialized);

  inline constellation(const constellation& from) : constellation(nullptr, from) {}
  inline constellation(constellation&& from) noexcept
      : constellation(nullptr, std::move(from)) {}
  inline constellation& operator=(const constellation& from) {
    CopyFrom(from);
    return *this;
  }
  inline constellation& operator=(constellation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const constellation& default_instance() {
    return *internal_default_instance();
  }
  static inline const constellation* internal_default_instance() {
    return reinterpret_cast<const constellation*>(
        &_constellation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(constellation& a, constellation& b) { a.Swap(&b); }
  inline void Swap(constellation* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(constellation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  constellation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<constellation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const constellation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const constellation& from) { constellation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(constellation* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "constellation"; }

 protected:
  explicit constellation(::google::protobuf::Arena* arena);
  constellation(::google::protobuf::Arena* arena, const constellation& from);
  constellation(::google::protobuf::Arena* arena, constellation&& from) noexcept
      : constellation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRealFieldNumber = 2,
    kImagFieldNumber = 3,
    kRefRealFieldNumber = 4,
    kRefImagFieldNumber = 5,
    kFieldFieldNumber = 1,
  };
  // repeated float real = 2;
  int real_size() const;
  private:
  int _internal_real_size() const;

  public:
  void clear_real() ;
  float real(int index) const;
  void set_real(int index, float value);
  void add_real(float value);
  const ::google::protobuf::RepeatedField<float>& real() const;
  ::google::protobuf::RepeatedField<float>* mutable_real();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_real() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_real();

  public:
  // repeated float imag = 3;
  int imag_size() const;
  private:
  int _internal_imag_size() const;

  public:
  void clear_imag() ;
  float imag(int index) const;
  void set_imag(int index, float value);
  void add_imag(float value);
  const ::google::protobuf::RepeatedField<float>& imag() const;
  ::google::protobuf::RepeatedField<float>* mutable_imag();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_imag() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_imag();

  public:
  // repeated float ref_real = 4;
  int ref_real_size() const;
  private:
  int _internal_ref_real_size() const;

  public:
  void clear_ref_real() ;
  float ref_real(int index) const;
  void set_ref_real(int index, float value);
  void add_ref_real(float value);
  const ::google::protobuf::RepeatedField<float>& ref_real() const;
  ::google::protobuf::RepeatedField<float>* mutable_ref_real();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_ref_real() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_ref_real();

  public:
  // repeated float ref_imag = 5;
  int ref_imag_size() const;
  private:
  int _internal_ref_imag_size() const;

  public:
  void clear_ref_imag() ;
  float ref_imag(int index) const;
  void set_ref_imag(int index, float value);
  void add_ref_imag(float value);
  const ::google::protobuf::RepeatedField<float>& ref_imag() const;
  ::google::protobuf::RepeatedField<float>* mutable_ref_imag();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_ref_imag() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_ref_imag();

  public:
  // string field = 1;
  void clear_field() ;
  const std::string& field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field(Arg_&& arg, Args_... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* value);

  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(
      const std::string& value);
  std::string* _internal_mutable_field();

  public:
  // @@protoc_insertion_point(class_scope:constellation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      27, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_constellation_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const constellation& from_msg);
    ::google::protobuf::RepeatedField<float> real_;
    ::google::protobuf::RepeatedField<float> imag_;
    ::google::protobuf::RepeatedField<float> ref_real_;
    ::google::protobuf::RepeatedField<float> ref_imag_;
    ::google::protobuf::internal::ArenaStringPtr field_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class EVM final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:EVM) */ {
 public:
  inline EVM() : EVM(nullptr) {}
  ~EVM() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EVM(
      ::google::protobuf::internal::ConstantInitialized);

  inline EVM(const EVM& from) : EVM(nullptr, from) {}
  inline EVM(EVM&& from) noexcept
      : EVM(nullptr, std::move(from)) {}
  inline EVM& operator=(const EVM& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVM& operator=(EVM&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EVM& default_instance() {
    return *internal_default_instance();
  }
  static inline const EVM* internal_default_instance() {
    return reinterpret_cast<const EVM*>(
        &_EVM_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(EVM& a, EVM& b) { a.Swap(&b); }
  inline void Swap(EVM* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EVM* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EVM* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EVM>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EVM& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EVM& from) { EVM::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EVM* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "EVM"; }

 protected:
  explicit EVM(::google::protobuf::Arena* arena);
  EVM(::google::protobuf::Arena* arena, const EVM& from);
  EVM(::google::protobuf::Arena* arena, EVM&& from) noexcept
      : EVM(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldFieldNumber = 1,
    kEvmRmsFieldNumber = 2,
    kEvmMaxFieldNumber = 3,
    kEvmMinFieldNumber = 4,
  };
  // string field = 1;
  void clear_field() ;
  const std::string& field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field(Arg_&& arg, Args_... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* value);

  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(
      const std::string& value);
  std::string* _internal_mutable_field();

  public:
  // float evm_rms = 2;
  void clear_evm_rms() ;
  float evm_rms() const;
  void set_evm_rms(float value);

  private:
  float _internal_evm_rms() const;
  void _internal_set_evm_rms(float value);

  public:
  // float evm_max = 3;
  void clear_evm_max() ;
  float evm_max() const;
  void set_evm_max(float value);

  private:
  float _internal_evm_max() const;
  void _internal_set_evm_max(float value);

  public:
  // float evm_min = 4;
  void clear_evm_min() ;
  float evm_min() const;
  void set_evm_min(float value);

  private:
  float _internal_evm_min() const;
  void _internal_set_evm_min(float value);

  public:
  // @@protoc_insertion_point(class_scope:EVM)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      17, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_EVM_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EVM& from_msg);
    ::google::protobuf::internal::ArenaStringPtr field_;
    float evm_rms_;
    float evm_max_;
    float evm_min_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_result_2eproto;
};
// -------------------------------------------------------------------

class result final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:result) */ {
 public:
  inline result() : result(nullptr) {}
  ~result() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR result(
      ::google::protobuf::internal::ConstantInitialized);

  inline result(const result& from) : result(nullptr, from) {}
  inline result(result&& from) noexcept
      : result(nullptr, std::move(from)) {}
  inline result& operator=(const result& from) {
    CopyFrom(from);
    return *this;
  }
  inline result& operator=(result&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const result& default_instance() {
    return *internal_default_instance();
  }
  static inline const result* internal_default_instance() {
    return reinterpret_cast<const result*>(
        &_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(result& a, result& b) { a.Swap(&b); }
  inline void Swap(result* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  result* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<result>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const result& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const result& from) { result::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(result* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "result"; }

 protected:
  explicit result(::google::protobuf::Arena* arena);
  result(::google::protobuf::Arena* arena, const result& from);
  result(::google::protobuf::Arena* arena, result&& from) noexcept
      : result(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpectrumFieldNumber = 1,
    kEvmResFieldNumber = 2,
    kEvmVsSymbolFieldNumber = 3,
    kEvmVsRbFieldNumber = 4,
    kConstellationDataFieldNumber = 5,
  };
  // repeated float spectrum = 1;
  int spectrum_size() const;
  private:
  int _internal_spectrum_size() const;

  public:
  void clear_spectrum() ;
  float spectrum(int index) const;
  void set_spectrum(int index, float value);
  void add_spectrum(float value);
  const ::google::protobuf::RepeatedField<float>& spectrum() const;
  ::google::protobuf::RepeatedField<float>* mutable_spectrum();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_spectrum() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_spectrum();

  public:
  // repeated .EVM evm_res = 2;
  int evm_res_size() const;
  private:
  int _internal_evm_res_size() const;

  public:
  void clear_evm_res() ;
  ::EVM* mutable_evm_res(int index);
  ::google::protobuf::RepeatedPtrField<::EVM>* mutable_evm_res();

  private:
  const ::google::protobuf::RepeatedPtrField<::EVM>& _internal_evm_res() const;
  ::google::protobuf::RepeatedPtrField<::EVM>* _internal_mutable_evm_res();
  public:
  const ::EVM& evm_res(int index) const;
  ::EVM* add_evm_res();
  const ::google::protobuf::RepeatedPtrField<::EVM>& evm_res() const;
  // repeated float evm_vs_symbol = 3;
  int evm_vs_symbol_size() const;
  private:
  int _internal_evm_vs_symbol_size() const;

  public:
  void clear_evm_vs_symbol() ;
  float evm_vs_symbol(int index) const;
  void set_evm_vs_symbol(int index, float value);
  void add_evm_vs_symbol(float value);
  const ::google::protobuf::RepeatedField<float>& evm_vs_symbol() const;
  ::google::protobuf::RepeatedField<float>* mutable_evm_vs_symbol();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_evm_vs_symbol() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_evm_vs_symbol();

  public:
  // repeated float evm_vs_rb = 4;
  int evm_vs_rb_size() const;
  private:
  int _internal_evm_vs_rb_size() const;

  public:
  void clear_evm_vs_rb() ;
  float evm_vs_rb(int index) const;
  void set_evm_vs_rb(int index, float value);
  void add_evm_vs_rb(float value);
  const ::google::protobuf::RepeatedField<float>& evm_vs_rb() const;
  ::google::protobuf::RepeatedField<float>* mutable_evm_vs_rb();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_evm_vs_rb() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_evm_vs_rb();

  public:
  // repeated .constellation constellation_data = 5;
  int constellation_data_size() const;
  private:
  int _internal_constellation_data_size() const;

  public:
  void clear_constellation_data() ;
  ::constellation* mutable_constellation_data(int index);
  ::google::protobuf::RepeatedPtrField<::constellation>* mutable_constellation_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::constellation>& _internal_constellation_data() const;
  ::google::protobuf::RepeatedPtrField<::constellation>* _internal_mutable_constellation_data();
  public:
  const ::constellation& constellation_data(int index) const;
  ::constellation* add_constellation_data();
  const ::google::protobuf::RepeatedPtrField<::constellation>& constellation_data() const;
  // @@protoc_insertion_point(class_scope:result)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_result_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const result& from_msg);
    ::google::protobuf::RepeatedField<float> spectrum_;
    ::google::protobuf::RepeatedPtrField< ::EVM > evm_res_;
    ::google::protobuf::RepeatedField<float> evm_vs_symbol_;
    ::google::protobuf::RepeatedField<float> evm_vs_rb_;
    ::google::protobuf::RepeatedPtrField< ::constellation > constellation_data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_result_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EVM

// string field = 1;
inline void EVM::clear_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.ClearToEmpty();
}
inline const std::string& EVM::field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EVM.field)
  return _internal_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EVM::set_field(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EVM.field)
}
inline std::string* EVM::mutable_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:EVM.field)
  return _s;
}
inline const std::string& EVM::_internal_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_.Get();
}
inline void EVM::_internal_set_field(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.Set(value, GetArena());
}
inline std::string* EVM::_internal_mutable_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.field_.Mutable( GetArena());
}
inline std::string* EVM::release_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:EVM.field)
  return _impl_.field_.Release();
}
inline void EVM::set_allocated_field(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_.IsDefault()) {
          _impl_.field_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EVM.field)
}

// float evm_rms = 2;
inline void EVM::clear_evm_rms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_rms_ = 0;
}
inline float EVM::evm_rms() const {
  // @@protoc_insertion_point(field_get:EVM.evm_rms)
  return _internal_evm_rms();
}
inline void EVM::set_evm_rms(float value) {
  _internal_set_evm_rms(value);
  // @@protoc_insertion_point(field_set:EVM.evm_rms)
}
inline float EVM::_internal_evm_rms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evm_rms_;
}
inline void EVM::_internal_set_evm_rms(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_rms_ = value;
}

// float evm_max = 3;
inline void EVM::clear_evm_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_max_ = 0;
}
inline float EVM::evm_max() const {
  // @@protoc_insertion_point(field_get:EVM.evm_max)
  return _internal_evm_max();
}
inline void EVM::set_evm_max(float value) {
  _internal_set_evm_max(value);
  // @@protoc_insertion_point(field_set:EVM.evm_max)
}
inline float EVM::_internal_evm_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evm_max_;
}
inline void EVM::_internal_set_evm_max(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_max_ = value;
}

// float evm_min = 4;
inline void EVM::clear_evm_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_min_ = 0;
}
inline float EVM::evm_min() const {
  // @@protoc_insertion_point(field_get:EVM.evm_min)
  return _internal_evm_min();
}
inline void EVM::set_evm_min(float value) {
  _internal_set_evm_min(value);
  // @@protoc_insertion_point(field_set:EVM.evm_min)
}
inline float EVM::_internal_evm_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evm_min_;
}
inline void EVM::_internal_set_evm_min(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_min_ = value;
}

// -------------------------------------------------------------------

// constellation

// string field = 1;
inline void constellation::clear_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.ClearToEmpty();
}
inline const std::string& constellation::field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:constellation.field)
  return _internal_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void constellation::set_field(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:constellation.field)
}
inline std::string* constellation::mutable_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:constellation.field)
  return _s;
}
inline const std::string& constellation::_internal_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_.Get();
}
inline void constellation::_internal_set_field(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.Set(value, GetArena());
}
inline std::string* constellation::_internal_mutable_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.field_.Mutable( GetArena());
}
inline std::string* constellation::release_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:constellation.field)
  return _impl_.field_.Release();
}
inline void constellation::set_allocated_field(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_.IsDefault()) {
          _impl_.field_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:constellation.field)
}

// repeated float real = 2;
inline int constellation::_internal_real_size() const {
  return _internal_real().size();
}
inline int constellation::real_size() const {
  return _internal_real_size();
}
inline void constellation::clear_real() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.real_.Clear();
}
inline float constellation::real(int index) const {
  // @@protoc_insertion_point(field_get:constellation.real)
  return _internal_real().Get(index);
}
inline void constellation::set_real(int index, float value) {
  _internal_mutable_real()->Set(index, value);
  // @@protoc_insertion_point(field_set:constellation.real)
}
inline void constellation::add_real(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_real()->Add(value);
  // @@protoc_insertion_point(field_add:constellation.real)
}
inline const ::google::protobuf::RepeatedField<float>& constellation::real() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:constellation.real)
  return _internal_real();
}
inline ::google::protobuf::RepeatedField<float>* constellation::mutable_real()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:constellation.real)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_real();
}
inline const ::google::protobuf::RepeatedField<float>&
constellation::_internal_real() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.real_;
}
inline ::google::protobuf::RepeatedField<float>* constellation::_internal_mutable_real() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.real_;
}

// repeated float imag = 3;
inline int constellation::_internal_imag_size() const {
  return _internal_imag().size();
}
inline int constellation::imag_size() const {
  return _internal_imag_size();
}
inline void constellation::clear_imag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.imag_.Clear();
}
inline float constellation::imag(int index) const {
  // @@protoc_insertion_point(field_get:constellation.imag)
  return _internal_imag().Get(index);
}
inline void constellation::set_imag(int index, float value) {
  _internal_mutable_imag()->Set(index, value);
  // @@protoc_insertion_point(field_set:constellation.imag)
}
inline void constellation::add_imag(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_imag()->Add(value);
  // @@protoc_insertion_point(field_add:constellation.imag)
}
inline const ::google::protobuf::RepeatedField<float>& constellation::imag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:constellation.imag)
  return _internal_imag();
}
inline ::google::protobuf::RepeatedField<float>* constellation::mutable_imag()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:constellation.imag)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_imag();
}
inline const ::google::protobuf::RepeatedField<float>&
constellation::_internal_imag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.imag_;
}
inline ::google::protobuf::RepeatedField<float>* constellation::_internal_mutable_imag() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.imag_;
}

// repeated float ref_real = 4;
inline int constellation::_internal_ref_real_size() const {
  return _internal_ref_real().size();
}
inline int constellation::ref_real_size() const {
  return _internal_ref_real_size();
}
inline void constellation::clear_ref_real() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_real_.Clear();
}
inline float constellation::ref_real(int index) const {
  // @@protoc_insertion_point(field_get:constellation.ref_real)
  return _internal_ref_real().Get(index);
}
inline void constellation::set_ref_real(int index, float value) {
  _internal_mutable_ref_real()->Set(index, value);
  // @@protoc_insertion_point(field_set:constellation.ref_real)
}
inline void constellation::add_ref_real(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ref_real()->Add(value);
  // @@protoc_insertion_point(field_add:constellation.ref_real)
}
inline const ::google::protobuf::RepeatedField<float>& constellation::ref_real() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:constellation.ref_real)
  return _internal_ref_real();
}
inline ::google::protobuf::RepeatedField<float>* constellation::mutable_ref_real()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:constellation.ref_real)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ref_real();
}
inline const ::google::protobuf::RepeatedField<float>&
constellation::_internal_ref_real() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_real_;
}
inline ::google::protobuf::RepeatedField<float>* constellation::_internal_mutable_ref_real() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ref_real_;
}

// repeated float ref_imag = 5;
inline int constellation::_internal_ref_imag_size() const {
  return _internal_ref_imag().size();
}
inline int constellation::ref_imag_size() const {
  return _internal_ref_imag_size();
}
inline void constellation::clear_ref_imag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_imag_.Clear();
}
inline float constellation::ref_imag(int index) const {
  // @@protoc_insertion_point(field_get:constellation.ref_imag)
  return _internal_ref_imag().Get(index);
}
inline void constellation::set_ref_imag(int index, float value) {
  _internal_mutable_ref_imag()->Set(index, value);
  // @@protoc_insertion_point(field_set:constellation.ref_imag)
}
inline void constellation::add_ref_imag(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ref_imag()->Add(value);
  // @@protoc_insertion_point(field_add:constellation.ref_imag)
}
inline const ::google::protobuf::RepeatedField<float>& constellation::ref_imag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:constellation.ref_imag)
  return _internal_ref_imag();
}
inline ::google::protobuf::RepeatedField<float>* constellation::mutable_ref_imag()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:constellation.ref_imag)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ref_imag();
}
inline const ::google::protobuf::RepeatedField<float>&
constellation::_internal_ref_imag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_imag_;
}
inline ::google::protobuf::RepeatedField<float>* constellation::_internal_mutable_ref_imag() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ref_imag_;
}

// -------------------------------------------------------------------

// result

// repeated float spectrum = 1;
inline int result::_internal_spectrum_size() const {
  return _internal_spectrum().size();
}
inline int result::spectrum_size() const {
  return _internal_spectrum_size();
}
inline void result::clear_spectrum() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectrum_.Clear();
}
inline float result::spectrum(int index) const {
  // @@protoc_insertion_point(field_get:result.spectrum)
  return _internal_spectrum().Get(index);
}
inline void result::set_spectrum(int index, float value) {
  _internal_mutable_spectrum()->Set(index, value);
  // @@protoc_insertion_point(field_set:result.spectrum)
}
inline void result::add_spectrum(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_spectrum()->Add(value);
  // @@protoc_insertion_point(field_add:result.spectrum)
}
inline const ::google::protobuf::RepeatedField<float>& result::spectrum() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:result.spectrum)
  return _internal_spectrum();
}
inline ::google::protobuf::RepeatedField<float>* result::mutable_spectrum()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:result.spectrum)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_spectrum();
}
inline const ::google::protobuf::RepeatedField<float>&
result::_internal_spectrum() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spectrum_;
}
inline ::google::protobuf::RepeatedField<float>* result::_internal_mutable_spectrum() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.spectrum_;
}

// repeated .EVM evm_res = 2;
inline int result::_internal_evm_res_size() const {
  return _internal_evm_res().size();
}
inline int result::evm_res_size() const {
  return _internal_evm_res_size();
}
inline void result::clear_evm_res() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_res_.Clear();
}
inline ::EVM* result::mutable_evm_res(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:result.evm_res)
  return _internal_mutable_evm_res()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::EVM>* result::mutable_evm_res()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:result.evm_res)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_evm_res();
}
inline const ::EVM& result::evm_res(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:result.evm_res)
  return _internal_evm_res().Get(index);
}
inline ::EVM* result::add_evm_res() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::EVM* _add = _internal_mutable_evm_res()->Add();
  // @@protoc_insertion_point(field_add:result.evm_res)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::EVM>& result::evm_res() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:result.evm_res)
  return _internal_evm_res();
}
inline const ::google::protobuf::RepeatedPtrField<::EVM>&
result::_internal_evm_res() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evm_res_;
}
inline ::google::protobuf::RepeatedPtrField<::EVM>*
result::_internal_mutable_evm_res() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.evm_res_;
}

// repeated float evm_vs_symbol = 3;
inline int result::_internal_evm_vs_symbol_size() const {
  return _internal_evm_vs_symbol().size();
}
inline int result::evm_vs_symbol_size() const {
  return _internal_evm_vs_symbol_size();
}
inline void result::clear_evm_vs_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_vs_symbol_.Clear();
}
inline float result::evm_vs_symbol(int index) const {
  // @@protoc_insertion_point(field_get:result.evm_vs_symbol)
  return _internal_evm_vs_symbol().Get(index);
}
inline void result::set_evm_vs_symbol(int index, float value) {
  _internal_mutable_evm_vs_symbol()->Set(index, value);
  // @@protoc_insertion_point(field_set:result.evm_vs_symbol)
}
inline void result::add_evm_vs_symbol(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_evm_vs_symbol()->Add(value);
  // @@protoc_insertion_point(field_add:result.evm_vs_symbol)
}
inline const ::google::protobuf::RepeatedField<float>& result::evm_vs_symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:result.evm_vs_symbol)
  return _internal_evm_vs_symbol();
}
inline ::google::protobuf::RepeatedField<float>* result::mutable_evm_vs_symbol()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:result.evm_vs_symbol)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_evm_vs_symbol();
}
inline const ::google::protobuf::RepeatedField<float>&
result::_internal_evm_vs_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evm_vs_symbol_;
}
inline ::google::protobuf::RepeatedField<float>* result::_internal_mutable_evm_vs_symbol() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.evm_vs_symbol_;
}

// repeated float evm_vs_rb = 4;
inline int result::_internal_evm_vs_rb_size() const {
  return _internal_evm_vs_rb().size();
}
inline int result::evm_vs_rb_size() const {
  return _internal_evm_vs_rb_size();
}
inline void result::clear_evm_vs_rb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.evm_vs_rb_.Clear();
}
inline float result::evm_vs_rb(int index) const {
  // @@protoc_insertion_point(field_get:result.evm_vs_rb)
  return _internal_evm_vs_rb().Get(index);
}
inline void result::set_evm_vs_rb(int index, float value) {
  _internal_mutable_evm_vs_rb()->Set(index, value);
  // @@protoc_insertion_point(field_set:result.evm_vs_rb)
}
inline void result::add_evm_vs_rb(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_evm_vs_rb()->Add(value);
  // @@protoc_insertion_point(field_add:result.evm_vs_rb)
}
inline const ::google::protobuf::RepeatedField<float>& result::evm_vs_rb() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:result.evm_vs_rb)
  return _internal_evm_vs_rb();
}
inline ::google::protobuf::RepeatedField<float>* result::mutable_evm_vs_rb()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:result.evm_vs_rb)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_evm_vs_rb();
}
inline const ::google::protobuf::RepeatedField<float>&
result::_internal_evm_vs_rb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.evm_vs_rb_;
}
inline ::google::protobuf::RepeatedField<float>* result::_internal_mutable_evm_vs_rb() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.evm_vs_rb_;
}

// repeated .constellation constellation_data = 5;
inline int result::_internal_constellation_data_size() const {
  return _internal_constellation_data().size();
}
inline int result::constellation_data_size() const {
  return _internal_constellation_data_size();
}
inline void result::clear_constellation_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.constellation_data_.Clear();
}
inline ::constellation* result::mutable_constellation_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:result.constellation_data)
  return _internal_mutable_constellation_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::constellation>* result::mutable_constellation_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:result.constellation_data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_constellation_data();
}
inline const ::constellation& result::constellation_data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:result.constellation_data)
  return _internal_constellation_data().Get(index);
}
inline ::constellation* result::add_constellation_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::constellation* _add = _internal_mutable_constellation_data()->Add();
  // @@protoc_insertion_point(field_add:result.constellation_data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::constellation>& result::constellation_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:result.constellation_data)
  return _internal_constellation_data();
}
inline const ::google::protobuf::RepeatedPtrField<::constellation>&
result::_internal_constellation_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.constellation_data_;
}
inline ::google::protobuf::RepeatedPtrField<::constellation>*
result::_internal_mutable_constellation_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.constellation_data_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_result_2eproto_2epb_2eh
